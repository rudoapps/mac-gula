name: Release to Separate Repo

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: macos-latest

    steps:
    - name: Checkout code repo
      uses: actions/checkout@v4

    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Build app
      run: |
        xcodebuild -project gula.xcodeproj \
          -scheme gula \
          -configuration Release \
          -derivedDataPath build/ \
          -archivePath build/gula.xcarchive \
          archive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          DEVELOPMENT_TEAM="" \
          PROVISIONING_PROFILE_SPECIFIER=""

    - name: Export app
      run: |
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>mac-application</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string></string>
            <key>provisioningProfiles</key>
            <dict/>
        </dict>
        </plist>
        EOF

        xcodebuild -exportArchive \
          -archivePath build/gula.xcarchive \
          -exportPath build/export \
          -exportOptionsPlist ExportOptions.plist \
          -allowProvisioningUpdates

    - name: Create DMG
      run: |
        brew install create-dmg

        create-dmg \
          --volname "Gula ${{ steps.version.outputs.version }}" \
          --window-pos 200 120 \
          --window-size 600 300 \
          --icon-size 100 \
          --icon "gula.app" 175 120 \
          --hide-extension "gula.app" \
          --app-drop-link 425 120 \
          --no-internet-enable \
          "Gula-${{ steps.version.outputs.version }}.dmg" \
          "build/export/" || true

        # Verify DMG was created
        if [ ! -f "Gula-${{ steps.version.outputs.version }}.dmg" ]; then
          echo "‚ùå Error: DMG file was not created"
          exit 1
        fi

        echo "‚úÖ DMG created successfully"
        ls -lh "Gula-${{ steps.version.outputs.version }}.dmg"

    - name: Generate Sparkle signature
      id: sparkle
      shell: bash {0}
      run: |
        set +e  # Don't exit on error, we want to capture the output

        echo "üì¶ Downloading Sparkle tools..."
        curl -L -o sparkle.zip https://github.com/sparkle-project/Sparkle/releases/download/2.7.3/Sparkle-for-Swift-Package-Manager.zip
        unzip -q sparkle.zip

        if [[ -z "${{ secrets.SPARKLE_PRIVATE_KEY }}" ]]; then
          echo "‚ùå Error: SPARKLE_PRIVATE_KEY secret is not set"
          exit 1
        fi

        echo "üîë Using Sparkle private key from secrets..."
        echo "${{ secrets.SPARKLE_PRIVATE_KEY }}" > sparkle_private_key
        chmod 600 sparkle_private_key

        echo "üîç Verifying setup..."
        echo "DMG file: $(ls -lh Gula-${{ steps.version.outputs.version }}.dmg 2>&1)"
        echo "Key file size: $(wc -c < sparkle_private_key) bytes (should be ~44)"
        echo "Key file: $(ls -lh sparkle_private_key 2>&1)"
        echo "Sign tool: $(ls -lh ./bin/sign_update 2>&1)"

        echo "‚úçÔ∏è  Signing DMG..."
        ./bin/sign_update --ed-key-file sparkle_private_key "Gula-${{ steps.version.outputs.version }}.dmg" > signature_output.txt 2>&1
        SIGN_EXIT_CODE=$?

        if [ $SIGN_EXIT_CODE -ne 0 ]; then
          echo ""
          echo "‚ùå Error: sign_update failed with exit code $SIGN_EXIT_CODE"
          echo ""
          echo "=== Error Output ==="
          cat signature_output.txt
          echo "==================="
          echo ""
          echo "‚ö†Ô∏è  The private key file is only $(wc -c < sparkle_private_key) bytes"
          echo "‚ö†Ô∏è  It should be approximately 44 bytes (one line of base64)"
          echo ""
          echo "Please verify your SPARKLE_PRIVATE_KEY secret:"
          echo "1. Go to ~/mac-gula-releases/private_key.txt"
          echo "2. Copy the ENTIRE content (should be one long line)"
          echo "3. Update the GitHub secret with the complete key"
          exit 1
        fi

        # Extract only the signature value from sparkle:edSignature="..."
        SIGNATURE=$(cat signature_output.txt | sed -n 's/.*sparkle:edSignature="\([^"]*\)".*/\1/p')
        echo "signature=$SIGNATURE" >> $GITHUB_OUTPUT
        echo "‚úÖ DMG signed successfully: $SIGNATURE"

        # Clean up
        rm -f sparkle_private_key signature_output.txt

    - name: Get DMG file size
      id: filesize
      run: |
        SIZE=$(stat -f%z "Gula-${{ steps.version.outputs.version }}.dmg")
        echo "size=$SIZE" >> $GITHUB_OUTPUT
        echo "DMG size: $SIZE bytes"

    - name: Clone releases repository
      run: |
        git clone https://x-access-token:${{ secrets.RELEASES_REPO_TOKEN }}@github.com/rudoapps/mac-gula-releases.git releases-repo

    - name: Update appcast.xml in releases repo
      run: |
        cd releases-repo

        # Get current date in RFC 2822 format
        PUBDATE=$(date -R)

        # Create new entry for appcast
        cat > new_entry.xml << EOF
        <item>
            <title>Gula ${{ steps.version.outputs.version }}</title>
            <link>https://github.com/rudoapps/mac-gula-releases/releases/tag/v${{ steps.version.outputs.version }}</link>
            <description><![CDATA[
                <h2>Gula ${{ steps.version.outputs.version }}</h2>
                <p>Nueva versi√≥n disponible!</p>

                <h3>Cambios:</h3>
                <p>Ver las <a href="https://github.com/rudoapps/mac-gula-releases/releases/tag/v${{ steps.version.outputs.version }}">notas de la versi√≥n</a> para m√°s detalles.</p>
            ]]></description>
            <pubDate>$PUBDATE</pubDate>
            <guid isPermaLink="false">gula-${{ steps.version.outputs.version }}</guid>
            <sparkle:version>${{ steps.version.outputs.version }}</sparkle:version>
            <sparkle:shortVersionString>${{ steps.version.outputs.version }}</sparkle:shortVersionString>
            <sparkle:minimumSystemVersion>15.0</sparkle:minimumSystemVersion>
            <enclosure
                url="https://github.com/rudoapps/mac-gula-releases/releases/download/v${{ steps.version.outputs.version }}/Gula-${{ steps.version.outputs.version }}.dmg"
                length="${{ steps.filesize.outputs.size }}"
                type="application/octet-stream"
                sparkle:edSignature="${{ steps.sparkle.outputs.signature }}" />
        </item>
        EOF

        # Add new entry to the top of the channel (after language tag)
        sed -i '' '/<language>es<\/language>/r new_entry.xml' appcast.xml

        echo "Updated appcast.xml with new release"

        # Cleanup
        rm new_entry.xml

    - name: Copy DMG to releases repo
      run: |
        cp "Gula-${{ steps.version.outputs.version }}.dmg" releases-repo/

    - name: Commit and push to releases repo
      run: |
        cd releases-repo

        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add .
        git commit -m "Release v${{ steps.version.outputs.version }}"
        git push

    - name: Create GitHub Release in releases repo
      env:
        VERSION: ${{ steps.version.outputs.version }}
        FILE_SIZE: ${{ steps.filesize.outputs.size }}
        SIGNATURE: ${{ steps.sparkle.outputs.signature }}
        GH_TOKEN: ${{ secrets.RELEASES_REPO_TOKEN }}
      run: |
        cd releases-repo

        echo "## Gula ${VERSION}" > release_notes.md
        echo "" >> release_notes.md
        echo "### Descarga" >> release_notes.md
        echo "- [Download Gula-${VERSION}.dmg](https://github.com/rudoapps/mac-gula-releases/releases/download/v${VERSION}/Gula-${VERSION}.dmg)" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Instalaci√≥n" >> release_notes.md
        echo "1. Descarga el archivo DMG" >> release_notes.md
        echo "2. √Åbrelo y arrastra Gula.app a tu carpeta de Aplicaciones" >> release_notes.md
        echo "3. Ejecuta Gula desde Aplicaciones" >> release_notes.md
        echo "" >> release_notes.md
        echo "### Actualizaciones Autom√°ticas" >> release_notes.md
        echo "Esta versi√≥n incluye verificaci√≥n autom√°tica de actualizaciones v√≠a Sparkle." >> release_notes.md
        echo "" >> release_notes.md
        echo "---" >> release_notes.md
        echo "**Tama√±o del archivo:** ${FILE_SIZE} bytes" >> release_notes.md
        echo "**Firma Sparkle:** ${SIGNATURE}" >> release_notes.md

        gh release create "v${VERSION}" \
          "Gula-${VERSION}.dmg" \
          --title "Gula ${VERSION}" \
          --notes-file release_notes.md

    - name: Create summary in code repo (optional)
      uses: softprops/action-gh-release@v1
      with:
        body: |
          ## Gula ${{ steps.version.outputs.version }}

          Esta release ha sido publicada en el [repositorio de releases](https://github.com/rudoapps/mac-gula-releases/releases/tag/v${{ steps.version.outputs.version }}).

          ### Descarga
          - [Descargar desde el repo de releases](https://github.com/rudoapps/mac-gula-releases/releases/download/v${{ steps.version.outputs.version }}/Gula-${{ steps.version.outputs.version }}.dmg)

          ### AppCast
          - [Ver appcast.xml](https://raw.githubusercontent.com/rudoapps/mac-gula-releases/main/appcast.xml)
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
