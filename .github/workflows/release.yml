name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Get version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"
        
    - name: Build app
      run: |
        # Build without code signing (GitHub Actions doesn't have certificates)
        xcodebuild -project gula.xcodeproj \
          -scheme gula \
          -configuration Release \
          -derivedDataPath build/ \
          -archivePath build/gula.xcarchive \
          archive \
          CODE_SIGN_IDENTITY="" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO \
          DEVELOPMENT_TEAM="" \
          PROVISIONING_PROFILE_SPECIFIER=""
          
    - name: Export app
      run: |
        # Create export options plist for unsigned build
        cat > ExportOptions.plist << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>mac-application</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>teamID</key>
            <string></string>
            <key>provisioningProfiles</key>
            <dict/>
        </dict>
        </plist>
        EOF

        xcodebuild -exportArchive \
          -archivePath build/gula.xcarchive \
          -exportPath build/export \
          -exportOptionsPlist ExportOptions.plist \
          -allowProvisioningUpdates
          
    - name: Create DMG
      run: |
        # Install create-dmg
        brew install create-dmg

        # Create DMG (sin icono de volumen por ahora)
        create-dmg \
          --volname "Gula ${{ steps.version.outputs.version }}" \
          --window-pos 200 120 \
          --window-size 600 300 \
          --icon-size 100 \
          --icon "gula.app" 175 120 \
          --hide-extension "gula.app" \
          --app-drop-link 425 120 \
          --no-internet-enable \
          "Gula-${{ steps.version.outputs.version }}.dmg" \
          "build/export/" || echo "DMG creado con warnings"
          
    - name: Generate Sparkle signature
      id: sparkle
      run: |
        # Install Sparkle tools - use specific version
        curl -L -o sparkle.tar.xz https://github.com/sparkle-project/Sparkle/releases/download/2.7.3/Sparkle-2.7.3-for-Swift-Package-Manager.tar.xz
        tar -xf sparkle.tar.xz
        
        # Generate Ed25519 key pair if they don't exist (for first run)
        if [[ ! -f sparkle_private_key ]]; then
          echo "Generating Sparkle signing keys..."
          ./bin/generate_keys > keys_output.txt
          
          # Extract private key (you'll need to add this as a GitHub secret)
          PRIVATE_KEY=$(grep "Private key:" keys_output.txt | cut -d' ' -f3-)
          echo "SPARKLE_PRIVATE_KEY=$PRIVATE_KEY" >> $GITHUB_OUTPUT
          
          # Extract public key (you'll need to update your project with this)
          PUBLIC_KEY=$(grep "Public key:" keys_output.txt | cut -d' ' -f3-)
          echo "SPARKLE_PUBLIC_KEY=$PUBLIC_KEY" >> $GITHUB_OUTPUT
          
          echo "⚠️  IMPORTANT: Save these keys!"
          echo "Private key (add as GitHub secret SPARKLE_PRIVATE_KEY): $PRIVATE_KEY"
          echo "Public key (update in Xcode project): $PUBLIC_KEY"
        fi
        
        # Sign the DMG
        if [[ -n "${{ secrets.SPARKLE_PRIVATE_KEY }}" ]]; then
          echo "${{ secrets.SPARKLE_PRIVATE_KEY }}" > sparkle_private_key
          SIGNATURE=$(./bin/sign_update "Gula-${{ steps.version.outputs.version }}.dmg" sparkle_private_key)
          echo "signature=$SIGNATURE" >> $GITHUB_OUTPUT
          echo "DMG signed: $SIGNATURE"
        else
          echo "⚠️  No private key found. Add SPARKLE_PRIVATE_KEY as a GitHub secret."
          echo "signature=UNSIGNED" >> $GITHUB_OUTPUT
        fi
        
    - name: Get DMG file size
      id: filesize
      run: |
        SIZE=$(stat -f%z "Gula-${{ steps.version.outputs.version }}.dmg")
        echo "size=$SIZE" >> $GITHUB_OUTPUT
        echo "DMG size: $SIZE bytes"
        
    - name: Update appcast.xml
      run: |
        # Get current date in RFC 2822 format
        PUBDATE=$(date -R)
        
        # Create new entry for appcast
        cat > new_entry.xml << EOF
        <item>
            <title>Gula ${{ steps.version.outputs.version }}</title>
            <link>https://github.com/\${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}</link>
            <description><![CDATA[
                <h2>Gula ${{ steps.version.outputs.version }}</h2>
                <p>New release available!</p>
                
                <h3>Changes:</h3>
                <p>View the <a href="https://github.com/\${{ github.repository }}/releases/tag/v${{ steps.version.outputs.version }}">release notes</a> for details.</p>
            ]]></description>
            <pubDate>$PUBDATE</pubDate>
            <guid isPermaLink="false">gula-${{ steps.version.outputs.version }}</guid>
            <sparkle:version>${{ steps.version.outputs.version }}</sparkle:version>
            <sparkle:shortVersionString>${{ steps.version.outputs.version }}</sparkle:shortVersionString>
            <sparkle:minimumSystemVersion>15.0</sparkle:minimumSystemVersion>
            <enclosure 
                url="https://github.com/\${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/Gula-${{ steps.version.outputs.version }}.dmg"
                length="${{ steps.filesize.outputs.size }}"
                type="application/octet-stream"
                sparkle:edSignature="${{ steps.sparkle.outputs.signature }}" />
        </item>
        EOF
        
        # Add new entry to the top of the channel (after language tag)
        sed -i '' '/<language>es<\/language>/r new_entry.xml' appcast.xml
        
        echo "Updated appcast.xml with new release"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          Gula-${{ steps.version.outputs.version }}.dmg
        body: |
          ## Gula ${{ steps.version.outputs.version }}
          
          ### Download
          - [Download Gula-${{ steps.version.outputs.version }}.dmg](https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/Gula-${{ steps.version.outputs.version }}.dmg)
          
          ### Installation
          1. Download the DMG file
          2. Open it and drag Gula.app to your Applications folder
          3. Launch Gula from Applications
          
          ### Sparkle Updates
          This release includes automatic update checking via Sparkle.
          
          ---
          **File Size:** ${{ steps.filesize.outputs.size }} bytes  
          **Sparkle Signature:** `${{ steps.sparkle.outputs.signature }}`
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Commit updated appcast.xml
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add appcast.xml
        git commit -m "Update appcast.xml for v${{ steps.version.outputs.version }}"
        git push origin main
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}